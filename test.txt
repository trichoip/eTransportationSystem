-search
-remove account 
-remove car (active)
-review 
-notication 
-show book 
-email 
-gia han book 
-validate phone
-


- create sql server amazon
- deploy backend to amazon
- create my sql amazon
- install mysql
- config mysql spring boot
- deploy backend to docker
- deploy backend to docker to amazon
- prn211 pe
- xin viec




- neu la Double , Integer, Long ... thi se co gia tri defaul la null
- neu int , long , double ... thi se co gia tri default khac null


  // @Override
    // @Transactional
    // // lay ra entity 1 rui set entity 2 trong entity 1 thi bi error
    // // vd: account.setDrivingLicense -> error
    // // chi loi khi co @Transactional -> xoa @Transactional fixbug
    // public AccountInfoResponse findAccountById(Long id) {

    // Account account = accountRepository.findById(id)
    // .orElseThrow(() -> new IllegalArgumentException("Account is not found!"));

    // if (account.getDrivingLicense() == null) {
    // DrivingLicense drivingLicense = new DrivingLicense();
    // drivingLicense.setStatus(DrivingLicenseStatus.NOTYET);
    // account.setDrivingLicense(drivingLicense);
    // }
    // return modelMapper.map(account, AccountInfoResponse.class);
    // }

-cv
- nếu 1 class mà khong kế thừa từ ai thì hashcodeandequal sẽ so sánh tất cả các fiel trong class đó
-nếu 1 class mà có extend từ 1 class cha thì hashcodeandequal thì mặc định là @EqualsAndHashCode(callSuper = false) 
->có nghĩa là nó chỉ so sánh tất cả fiel trong class con chứ không so sanh gồm cả fiel class cha
- nếu muốn so sánh tất cả fiel gồm class cha và con thì set "callSuper = true" vd: @EqualsAndHashCode(callSuper = true)


- trong @onetomany one là father và many là child khi save father thì chỉ save father chứ không có save child , kể cả khi set father vào list child thì vẫn chỉ save father
-nếu muốn save father mà tự động save child thì phải có cascade = CascadeType.ALL trong father
- nếu đã có cascade = CascadeType.ALL trong father -> có 2 trường hợp đặc biệt
+nếu father có child mà child không có father thì khi save father thì vẫn save child nhưng fiel father_id trong child là null
+nếu father có child mà child có father thì khi save father thì trong db child có fiel father_id là id của father

  // forenkey(child) onetoone khong can optional = false
  // primekey(father) onetoone thi can optional = false de fech lazy hieu qua 
  luu y: fetch = FetchType.LAZY, optional = false  nếu query father xong mà có xử lý gọi child ra thì nếu father có child thì sẽ không báo lỗi còn nếu father mà không có child thì sẽ có error 